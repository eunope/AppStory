const through = require('through2'),
	File = require('vinyl'),
	path = require('path'),
	fs = require('fs'),
	cheerio = require('cheerio');

const gutil = require('gulp-util'),
	PluginError = gutil.PluginError;

const PLUGIN_NAME = 'gulp-uit-index';

function gulpUitIndex(opt) {
	var default_opt = {
		exJs: false, // true = output js file, false = in html
		html: true, // true = output html, false = json only
		qrcode: true, // true = output qrcode, false = qrcode remove
		fold: false, // true = fold function on, false off
		filename: '@index',
		title: '마크업 산출물',
		fileSort: 'file', // file = filename, title = title
		groupSort: 'asc' // asc, desc
	};
	var option = require('util')._extend(default_opt, opt);

	var filelist = {'___default' : {groupList: []}};

	function bufferJson(file, enc, cb) {
		var fileobj = {path: file.relative, dir : path.dirname(file.relative), basename: path.basename(file.relative)};
		if(file.isNull() || file.relative == option.filename+'.html' || file.relative == option.filename+'.json') {
			cb();
			return;
		}

		if(file.isStream()) {
			this.emit('error', new PluginError('gulp-uit-index', 'Streaming not supported'));
			cb();
			return;
		}

		var htmlString = file.contents.toString(enc);

		var $ = cheerio.load(htmlString,{decodeEntities: false});
		fileobj.title = $('title').eq(0).text();
		var pri_title = $.html().match(/<!--\s*pageTitle\s*:\s*(?:"|')(.*?)(?:"|')\s*-->/);
		var phpTitle = htmlString.match(/<\?.*\$pageTitle\s*=\s*['|"](.*?)['|"].*\?>/i);
		if(pri_title) {
			fileobj.title = pri_title[1].trim();
		} else if(phpTitle) {
			fileobj.title = phpTitle[1].trim();
		} else {
			fileobj.title = fileobj.title || fileobj.basename;
		}
		var group = fileobj.title.match(/\[(.*)\](.*)/);
		if(group) {
			fileobj.title = group[2].trim();
			if(filelist[group[1].trim()]) {
				filelist[group[1].trim()].groupList.push(fileobj);
			} else {
				filelist[group[1].trim()] = {groupList: [fileobj]};
			}
		} else {
			filelist['___default'].groupList.push(fileobj);
		}
		cb();
	}

	function endStream(cb) {
		var filelist_index = [];
		for(var key in filelist) {
			if(option.fileSort == 'title') {
				filelist[key].groupList.sort((a,b) => {
					var return_value;
					if(a.title > b.title) {
						return_value = 1;
					} else if(a.title < b.title) {
						return_value = -1;
					} else {
						return_value = 0;
					}
					return return_value;
				});
			}
			filelist_index.push({groupName: key, groupList: filelist[key].groupList});
		}
		filelist_index.sort((a,b) => {
			var return_value;
			if(a.groupName == '___default') {
				return 1;
			}
			else if(b.groupName == '___default') {
				return -1;
			}
			if(a.groupName > b.groupName) {
				return_value = 1;
			} else if(a.groupName < b.groupName) {
				return_value = -1;
			} else {
				return_value = 0;
			}

			if(option.groupSort == 'desc') {
				return_value = return_value * -1;
			}

			return return_value;
		});
		try {
			var jsfile = fs.readFileSync(__dirname+'/template/uit_index.js').toString();
		} catch (err) {
			this.emit('error', new PluginError('gulp-uit-index', 'Not found template/uit_index.js'));
			cb();
		}
		jsfile = 'var fold = '+option.fold+';\n'+jsfile;
		if(option.exJs) {
			var outputFile = new File({path: option.filename+'.js'});
			var jsOutput = jsfile.replace(/\/\* inject\:filelist_json \*\//, 'var filelist_json = '+JSON.stringify(filelist_index, null)+';');
			outputFile.contents = new Buffer(jsOutput);
			this.push(outputFile);
		}
		if(option.html) {
			fs.readFile(__dirname+'/template/template.html', (err, data) => {
				if(err) {
					this.emit('error', new PluginError('gulp-uit-index', 'Not found template/template.html'));
					cb();
					return;
				}
				var outputFile = new File({path: option.filename+'.html'});
				var script = !option.exJs ? '\n	<script type="text/javascript">\n		var filelist_json = '+JSON.stringify(filelist_index, null)+';\n	</script>' : '';
				var exjs = !option.exJs ? '\n	<script type="text/javascript">\n		'+jsfile+'\n		</script>' : '\n	<script src="./'+option.filename+'.js" charset="utf-8"></script>';
				var $ = cheerio.load(data.toString(),{decodeEntities: false});
				$('.hd_h1').eq(0).text(option.title);
				if(!option.qrcode) $('.qr_code').remove();
				var html = $.html().replace(/\n\s*<!--\s*inject\s*:\s*filelist_json\s*-->/, script);
				html = html.replace(/\n\s*<!--\s*inject\s*:\s*exjs\s*-->/, exjs);
				outputFile.contents = new Buffer(html);
				this.push(outputFile);
				cb();
			});
		} else {
			cb();
		}
	}

	return through.obj(bufferJson, endStream);
}

module.exports = gulpUitIndex;
